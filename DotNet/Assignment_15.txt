Create MVC application--> 
1. create poco class custumer id, name, mobile, bill amount
2. create interface ICustomer with method GetAllCustomer
3. create class Service Customer - implements ICustomer
4. create Controller Customer
5. Create constructor & inject interfence reference
6. Writr action method Index which will return list of customer
7. Generate view
8. In program.cs file, call add Transient method
9. when u run app it should display list of method

_Layout.cshtml
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - WebApplication2</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/WebApplication2.styles.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">WebApplication2</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2023 - WebApplication2 - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>



Program.cs


using WebApplication2.Models;

namespace WebApplication2
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.
            builder.Services.AddControllersWithViews();
            builder.Services.AddTransient<Icustomer, ServiceCustomer>();

            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (!app.Environment.IsDevelopment())
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.MapControllerRoute(
                name: "default",
                pattern: "{controller=Customer}/{action=Index}/{id?}");

            app.Run();
        }
    }
}


Index.cshtml

@model IEnumerable<WebApplication2.Models.Customer>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Mobile)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Bill)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Id)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Mobile)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Bill)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
            </td>
        </tr>
}
    </tbody>
</table>

Customer.cs

using Microsoft.AspNetCore.Mvc;
using WebApplication2.Models;

namespace WebApplication2.Controllers
{
    public class Customer : Controller
    {
        Icustomer cs;
        public Customer(Icustomer c) {
            this.cs = c;
        }
        public IActionResult Index()
        {
            return View(cs.GetAllCustomer());
        }
        
    }
}

ServiceCustomer

namespace WebApplication2.Models
{
    public class ServiceCustomer : Icustomer
    {
        public static List<Customer> l1;

        public ServiceCustomer()
        {
            l1 = new List<Customer>()
            {
                new Customer() {Id = 1,Name="Mayur",Mobile="7263075543",Bill=5000 },
                new Customer() {Id = 2,Name="Akshay",Mobile="8600987263",Bill=8000 },
                new Customer() {Id = 3,Name="Suyash",Mobile="9921232575",Bill=6000 },
                 new Customer() {Id = 2,Name="Prashant",Mobile="8600987263",Bill=65000 },
                new Customer() {Id = 3,Name="Rohit",Mobile="9921232575",Bill=7800 },
                new Customer() {Id = 3,Name="Omkar",Mobile="9921232575",Bill=7800 }
                };
        }
        public IEnumerable<Customer> GetAllCustomer()
        {
            return l1;
        }
    }
}

Icustomer

namespace WebApplication2.Models
{
    public class ServiceCustomer : Icustomer
    {
        public static List<Customer> l1;

        public ServiceCustomer()
        {
            l1 = new List<Customer>()
            {
                new Customer() {Id = 1,Name="Mayur",Mobile="7263075543",Bill=5000 },
                new Customer() {Id = 2,Name="Akshay",Mobile="8600987263",Bill=8000 },
                new Customer() {Id = 3,Name="Suyash",Mobile="9921232575",Bill=6000 },
                 new Customer() {Id = 2,Name="Prashant",Mobile="8600987263",Bill=65000 },
                new Customer() {Id = 3,Name="Rohit",Mobile="9921232575",Bill=7800 },
                new Customer() {Id = 3,Name="Omkar",Mobile="9921232575",Bill=7800 }
                };
        }
        public IEnumerable<Customer> GetAllCustomer()
        {
            return l1;
        }
    }
}

Customer

namespace WebApplication2.Models
{
    public class Customer
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Mobile { get; set; }
        public double Bill { get; set; }
    }
}
