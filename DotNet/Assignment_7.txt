Q.Create class Account having member id, name , balance.
Id autoincrement write read only property
Write getter setter for name and balance.
Balance can be modified only by child class.
This has virtual withdraw method which will 0.
It has deposit method.
Create two child class current and saving and override withdraw method. 
Create reference of Account class and point to saving account
and  current account. Using parentâ€™s reference call withdraw method and deposit method.
Use ToString method to display status of the object [id name balance]


solution:

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DAC
{
    class Account
    {
        int id;
        string name;
        protected double balance;
        static int getid;
        protected static double intrate = 0.07;

        public Account( string name, double balance)
        {
            id = ++getid;
            Name = name;
            Balance = balance;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }
        public Double Balance
        {
            get { return balance; }
            set {
                if (value <= 0)
                {
                    Console.Beep();
                    throw new Exception("You can not open account with zero balance");
                }
                else { 
                balance = value;
                }
            }
        }
        public void deposit (int amt)
        {
            balance = balance + amt;
        }
        public virtual void withdraw(int amt)
        {
            balance = balance - amt;
        }
        public override string ToString()
        {
            return string.Format("Id:{0} Name:{1} Balance:{2}",id,name,balance);
        }
    }
    class Savingaccount:Account
    {
        string typeOfAccount;
        const int minbal = 1000;

        public Savingaccount(string name,double balance,string typeOfAccount):base(name,balance) 
        {
            this.typeOfAccount = typeOfAccount;
        }
        public override void withdraw(int amt)
        {
            if(balance+minbal-amt <= 1000)
            {
                Console.Beep();
                throw new Exception("After  removing ammout min balance should be 1000");
            }
            else
            {
                this.balance -= amt;
            }
        }
    }
    class Currentaccount:Account
    {
        string typeOfAccount;
        public Currentaccount(string name, double balance, string typeOfAccount) : base(name, balance)
        {
            this.typeOfAccount = typeOfAccount;
        }
        public override void withdraw(int amt)
        {
            this.balance -= amt;
        }
    }
    class demo
    {
        public static void Main()
        {
            Account c = new Currentaccount("Mayur Current", 50000, "Current");
            Account s = new Savingaccount("Mayur Saving", 40000, "Saving");
            Console.WriteLine(c.ToString());
            Console.WriteLine(s.ToString());
            c.withdraw(1000);
            s.withdraw(1000);
            Console.WriteLine(c.ToString());
            Console.WriteLine(s.ToString());
            c.deposit(10000);
            s.deposit(10000);
            Console.WriteLine(c.ToString());
            Console.WriteLine(s.ToString());
            c.withdraw(59000);
            s.withdraw(49000);
            Console.WriteLine(c.ToString());
            Console.WriteLine(s.ToString());
        }
    }

}


Q.Create abstract class account having member id. name, balance
Id is generated by application It is readonly property for ID.
It has abstract method public abstract void withdraw(double amt);
It has static method public static double payint(); which will return interest and increase balance if account holder has positive balance
It has deposit method which will increase the balance.
Write getter setter for name 
Balance can be set only by child class.
It has static double int_rate=0.07
Create two child class Saving, Current
Initialise data by calling parentclass constructor
In saving account maintain minimum balance 1000 for this declare
Const double minbal=1000
In current account negative balance allowed.
Let both child class override withdraw method.
Create array of account class and store 2 object of saving account and current account.
Do the transaction. When you load it should print name of bank


Solution:
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DAC
{
    abstract class Account
    {
        static Account()
        {
            Console.WriteLine("State Bank of BHarat");
        }
        int id;
        string name;
        protected double balance;
        static int getid;
        protected static double intrate = 0.07;

        public Account( string name, double balance)
        {
            id = ++getid;
            Name = name;
            Balance = balance;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }
        public Double Balance
        {
            get { return balance; }
            set {
                if (value <= 0)
                {
                    Console.Beep();
                    throw new Exception("You can not open account with zero balance");
                }
                else { 
                balance = value;
                }
            }
        }
        public void deposit (int amt)
        {
            balance = balance + amt;
        }
        abstract public void withdraw(double amt);
        
        public override string ToString()
        {
            return string.Format("Id:{0} Name:{1} Balance:{2}",id,name,balance);
        }
    }
    class Savingaccount:Account
    {
        string typeOfAccount;
        const int minbal = 1000;

        public Savingaccount(string name,double balance,string typeOfAccount):base(name,balance) 
        {
            this.typeOfAccount = typeOfAccount;
        }
        public override void withdraw(double amt)
        {
            if(balance+minbal-amt <= 1000)
            {
                Console.Beep();
                throw new Exception("After  removing ammout min balance should be 1000");
            }
            else
            {
                this.balance -= amt;
            }
        }
    }
    class Currentaccount:Account
    {
        string typeOfAccount;
        public Currentaccount(string name, double balance, string typeOfAccount) : base(name, balance)
        {
            this.typeOfAccount = typeOfAccount;
        }
        public override void withdraw(double amt)
        {
            this.balance -= amt;
        }
    }
    class demo
    {
        public static void Main()
        {
            Account[] arr = new Account[2];
            Savingaccount s = new Savingaccount("Mayur", 50000, "Saving");
            Currentaccount c = new Currentaccount("Mayur saving", 50000, "Current");
            arr[0]= c;
            arr[1]= s;
            for(int i=0; i<arr.Length; i++)
            {
                Console.WriteLine(arr[i].ToString());
                arr[i].ToString();
            }
        }
    }

}

