Q) : Create a table customer id name address mobno use table customer and complete following task
1: display all customer data(strongly type);
2: accept id from the user and delete particular customers;
3: create a object of customer and store data in customer table;
4: write search method with parameter id; write search method with parameter string(name,mobileno);
5: accept id and name from user and update the record

conn.cs
using Microsoft.Extensions.Configuration;

namespace mayur
{
    class main
    {
        private static IConfiguration _iconfiguration;
        static void GetAppSettings()
        {
            var builer = new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory()).AddJsonFile("Appsettings.json",optional:false,reloadOnChange:true);
            _iconfiguration = builer.Build();
        }
        static void perform()
        {
            demo d = new demo(_iconfiguration);
          
            /* Console.WriteLine(d.delete(1));
            Employee e = new Employee(){Name = "Akshay", Mobile = "1234569870", Address = "delhi"};
            d.add(e);
            d.display();*/
            Console.WriteLine("searching");
            d.searchwith(5);
            Console.WriteLine("searching");
            d.searchwithname("Akshay", "1234569870");
           int a= d.update(8, "Abhishek", "Abhishek", "Nashik", "1234567890");
            Console.WriteLine(a);
            d.display();
        }
    
        static void Main(string[] args) { 
            GetAppSettings();
            perform();
            

        }
    }
    

}

program.cs
using Microsoft.Extensions.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Reflection;

namespace mayur
{
    internal class Employee
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Address { get; set; }
        public string Mobile { get; set; }

        public override string? ToString()
        {
            return base.ToString();
        }
    }
    internal class demo
    {
        private string _connstring;

        public demo(IConfiguration configuration)
        {
            _connstring = configuration.GetConnectionString("default");
        }

        public SqlConnection GetConnection()
        {
            SqlConnection conn = new SqlConnection();
            conn.ConnectionString = _connstring;
            return conn;
        }

        public void display()
        {
            SqlConnection sqlconn = null;
            SqlCommand sqlcmd;
            try
            {
                sqlconn = GetConnection();
                sqlcmd = new SqlCommand("display", sqlconn);
                sqlcmd.CommandType = CommandType.StoredProcedure;
                sqlconn.Open();
                SqlDataReader rd = sqlcmd.ExecuteReader();
                if (rd.HasRows)
                {
                    while (rd.Read())
                    {
                        Employee p = new Employee();

                        Console.WriteLine(rd["Id"] + " " + rd["Name"].ToString() + " " + rd["Address"].ToString() + " " + rd["Mobile"].ToString());

                    }
                }
            }
            catch (SqlException se)
            { Console.WriteLine(se.Message); }
            finally
            {
                sqlconn.Close();

            }
        }

        public int delete(int id)
        {
            SqlConnection sqlconn = null;
            SqlCommand sqlcmd = null;
            int no = 0;
            try
            {
                sqlconn = GetConnection();
                sqlconn.Open();
                sqlcmd = new SqlCommand("delete from Employee where id=@pid", sqlconn);
                sqlcmd.Parameters.AddWithValue("@pid", id);
                no = sqlcmd.ExecuteNonQuery();
            }
            catch (SqlException se)
            {
                Console.WriteLine(se.Message);
            }
            finally
            {
                sqlconn.Close();

            }
            return no;
        }
        //create a object of customer and store data in customer table;
        public void add(Employee e)
        {
            SqlCommand sqlcmd = null;
            SqlConnection sqlconn = null;
            try
            {
                sqlconn = GetConnection();
                sqlcmd = new SqlCommand("addemp", sqlconn);
                sqlcmd.CommandType = CommandType.StoredProcedure;
                sqlcmd.Parameters.Add("@pname", SqlDbType.NVarChar).Value = e.Name;
                sqlcmd.Parameters.Add("@paddress", SqlDbType.NVarChar).Value = e.Address;
                sqlcmd.Parameters.Add("@pmobile", SqlDbType.VarChar).Value = e.Mobile;
                sqlconn.Open();
                sqlcmd.ExecuteNonQuery();


            }
            catch (SqlException se)
            {
                Console.WriteLine(se.Message);
            }
            finally
            {
                sqlconn.Close();
            }
        }
        //write search method with parameter id;
        public void searchwith(int id)
        {
            SqlConnection sqlconn = null;
            SqlCommand sqlcmd = null;

            try
            {
                sqlconn = GetConnection();

                sqlcmd = new SqlCommand("saerchwithid", sqlconn);
                sqlcmd.CommandType = CommandType.StoredProcedure;
                sqlcmd.Parameters.Add("@pid", SqlDbType.Int).Value = id;
                sqlconn.Open();

                SqlDataReader rd = sqlcmd.ExecuteReader();
                if (rd.HasRows)
                {
                    while (rd.Read())
                    {
                        Console.WriteLine(rd["Id"] + " " + rd["Name"].ToString() + " " + rd["Address"].ToString() + " " + rd["Mobile"].ToString());

                    }
                }

            }
            catch (SqlException se)
            {
                Console.WriteLine(se.Message);
            }
            finally
            {
                sqlconn.Close();
            }

        }
        //write search method with parameter string(name,mobileno);
        public void searchwithname(string name, string mobile)
        {
            SqlConnection sqlconn = null;
            SqlCommand sqlcmd = null;

            try
            {
                sqlconn = GetConnection();

                sqlcmd = new SqlCommand("search", sqlconn);
                sqlcmd.CommandType = CommandType.StoredProcedure;
                sqlcmd.Parameters.Add("@pname", SqlDbType.NVarChar).Value = name;
                sqlcmd.Parameters.Add("@pmobile", SqlDbType.VarChar).Value = mobile;
                sqlconn.Open();

                SqlDataReader rd = sqlcmd.ExecuteReader();
                if (rd.HasRows)
                {
                    while (rd.Read())
                    {
                        Console.WriteLine(rd["Id"] + " " + rd["Name"].ToString() + " " + rd["Address"].ToString() + " " + rd["Mobile"].ToString());

                    }
                }

            }
            catch (SqlException se)
            {
                Console.WriteLine(se.Message);
            }
            finally
            {
                sqlconn.Close();
            }


        }
        //accept id and name from user and update the record
        /*public void Update(int id, string name)
        {
            SqlConnection sqlconn = null;
            SqlCommand sqlcmd = null;

            try
            {
                sqlconn = GetConnection();

                sqlcmd = new SqlCommand("update", sqlconn);
                sqlcmd.CommandType = CommandType.StoredProcedure;
                sqlcmd.Parameters.Add("@pid", SqlDbType.Int).Value = id;
                sqlcmd.Parameters.Add("@pname", SqlDbType.NVarChar).Value = name;
                Console.WriteLine("Enter New Name Adress Mobile");
                string a = Console.ReadLine();
                string b = Console.ReadLine();
                string c = Console.ReadLine();

                sqlcmd.Parameters.Add("@pnewname", SqlDbType.NVarChar).Value = a;
                sqlcmd.Parameters.Add("@pnewadd", SqlDbType.NVarChar).Value = b;
                sqlcmd.Parameters.Add("@pnewmobile", SqlDbType.NVarChar).Value = c;
                sqlconn.Open();

                SqlDataReader rd = sqlcmd.ExecuteReader();
                if (rd.HasRows)
                {
                    while (rd.Read())
                    {
                        Console.WriteLine(rd["Id"] + " " + rd["Name"].ToString() + " " + rd["Address"].ToString() + " " + rd["Mobile"].ToString());

                    }
                }

            }
            catch (SqlException se)
            {
                Console.WriteLine(se.Message);
            }
            finally
            {
                sqlconn.Close();
            }
        }*/
        // accept id and name from user and update the record
        public int update(int id,string name, string newname,string newadr,string mb)
        {
            SqlConnection sqlconn = null;  
            SqlCommand sqlcmd = null;
            int temp = 0;
            try
            {
                sqlconn = GetConnection();
                sqlcmd = new SqlCommand("empupdate",sqlconn);
                sqlcmd.CommandType = CommandType.StoredProcedure;
                sqlcmd.Parameters.Add("@id", SqlDbType.Int).Value = id;
                sqlcmd.Parameters.Add("@name", SqlDbType.NVarChar).Value = name;
                sqlcmd.Parameters.Add("@newname", SqlDbType.NVarChar).Value = newname;
                sqlcmd.Parameters.Add("@newadr", SqlDbType.NVarChar).Value = newadr;
                sqlcmd.Parameters.Add("@mb", SqlDbType.VarChar).Value = mb;
                sqlconn.Open();
               temp= sqlcmd.ExecuteNonQuery();
                    
            }
            catch(SqlException se) { 
                Console.WriteLine(se.Message);
            }
            finally
            {
                sqlconn.Close();
            }
            return temp;
        }
    }
}


Q.Create database HR with Table Employee having column name Id,Name, Salary,Gender,Address.
Create Interface IEmployeeRepository with following methods
	 Employee GetEmployee(int Id);
        IEnumerable<Employee> GetAllEmployee();
        Employee Add(Employee employee);
        Employee Update(Employee employeeChanges);
        Employee Delete(int Id);
Create class which will implement IEmployeeRepository.
In entry class call the method and complete CRUD.
solution:

using mayur;
using mayur.ConsoleApp_ADO.Models;
using Microsoft.Extensions.Configuration;
using System.Collections.Generic;
using System.Data;

namespace mayur
{
    interface IEmployeeRepository {
        Employee GetEmployee(int Id);
        IEnumerable<Employee> GetAllEmployee();
        Employee Add(Employee employee);
        Employee Update(Employee employeeChanges);
        Employee Delete(int Id);
    }
    public class Employee
    {
        public int id { get; set; }
        public string name { get; set; }
        public double salary { get; set; }
    }
    class test : IEmployeeRepository
    {
        public static List<Employee> _imps = new List<Employee>()
        {
            new Employee(){name="Mayur",id=1,salary=50000},
            new Employee(){name="Suyash",id=2,salary=40000},
            new Employee(){name="Om",id=3,salary=30000},
            new Employee(){name="Rohit",id=4,salary=20000},
            new Employee(){name="Akshay",id=5,salary=10000},
        };

        public Employee Add(Employee employee)
        {
            _imps.Add(employee);
            employee.id=_imps.Max(i => i.id+1);
            return employee;
        }

        public Employee Delete(int Id)
        {
            Employee employee = _imps.FirstOrDefault(i => i.id==Id);
            if (employee == null)
            {
                _imps.Remove(employee);
            }
            return employee;
        }

        public IEnumerable<Employee> GetAllEmployee()
        {
            return _imps;
        }

        public Employee GetEmployee(int Id)
        {
            Employee employee = _imps.FirstOrDefault(i => i.id == Id);
            return employee;
        }

        public Employee Update(Employee employeeChanges)
        {
            Employee employee = _imps.FirstOrDefault(i => i.id == employeeChanges.id);
            if (employee == null)
            {
                employee.name= employeeChanges.name;
                employee.salary= employeeChanges.salary;
                employee.id=employee.id;
                _imps.Add(employee);
            }
            return employee;
        }
    }
    class demo
    {
        public static void Main()
        {
            test s = new test();
            Employee e = new Employee()
            {
                id = 6,
                name = "testing",
                salary = 50000
            };
            Console.WriteLine(s.Add(e));
            var test1= s.GetAllEmployee();
            foreach (var i in test1)
            {
                Console.WriteLine(i.name);
            }
        }
    }
}

Q.Create database HR with Table Employee having column name Id,Name, Salary,Gender,Address.
Create Data_Layer class and complete CRUD operation
Public void Add(Employee e){} // Create
Public void Delete(Int Id ){ } //Delete
Public  void Update(Employee e, int Id){} Update
Public Employee Get(int id)// Read one record 
Public List<Employee> GetAll(){} //Display all data

Solution:
using Microsoft.Extensions.Configuration;

namespace mayur
{
    class conn
    {
        public static IConfiguration _iconfiguration;
        static void GetConnectionString()
        {
            var builder = new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory()).AddJsonFile("Appsettings.json", optional: false, reloadOnChange: true);
            _iconfiguration = builder.Build();
        }
        static  void perform()
        {
            demo d = new demo(_iconfiguration);
            Employee e = new Employee();
            e.Name = "Mayur";
            e.Salary = 100000;
            e.Gender = "Male";
            e.Address = "US";
            d.Add(e);
            // d.Delete(1);
            //d.Update(e, 2);
            // Employee f= d.Get(2);
            // Console.WriteLine(f);

           var v= d.GetAll();
            foreach (var item in v)
            {
                Console.WriteLine(item);
            }


        }
        static void Main()
        {
            GetConnectionString();
            perform();
            
            


        }
    }
}




using Microsoft.Extensions.Configuration;
using System.Data;
using System.Data.SqlClient;

namespace mayur
{
    public class Employee
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Address { get; set; }
        public string Gender { get; set; }
        public double Salary { get; set; }
        public override string ToString()
        {
            string s =Id+" "+ Name + " " + Address + " " + Salary.ToString() +" "+ Gender ;
            return s;
        }
    }
    public class demo
    {
        static string _connstring;
       public demo(IConfiguration iconfigutration)
        {
            _connstring = iconfigutration.GetConnectionString("default");
        }
        public SqlConnection getsqlconn()
        {
            return new SqlConnection(_connstring);
        }
        public void Add(Employee e)
        {
            SqlConnection conn= getsqlconn();
            SqlCommand cmd;
            try
            {
                cmd = new SqlCommand("add1", conn);
                cmd.CommandType=CommandType.StoredProcedure;
                cmd.Parameters.Add("@name", SqlDbType.NVarChar).Value = e.Name;
                cmd.Parameters.Add("@salary", SqlDbType.Float).Value = e.Salary;
                cmd.Parameters.Add("@gen", SqlDbType.VarChar).Value = e.Gender;
                cmd.Parameters.Add("@add", SqlDbType.NVarChar).Value = e.Address;
                conn.Open();
                Console.WriteLine(cmd.ExecuteNonQuery());
            }
            catch (SqlException ex)
            {
                Console.WriteLine(ex.Message);
            }
            finally
            {
                conn.Close();
            }
        }
        public void Delete(int Id)
        {
            SqlConnection conn = getsqlconn();
            SqlCommand cmd;
            try
            {
                cmd = new SqlCommand("delete from Employee where Id=@id", conn);
                cmd.Parameters.Add("@id",SqlDbType.Int).Value = Id;                
                conn.Open();
                Console.WriteLine(cmd.ExecuteNonQuery());
            }
            catch (SqlException ex)
            {
                Console.WriteLine(ex.Message);
            }
            finally
            {
                conn.Close();
            }
        }
        public void Update(Employee e, int Id)
        {
            SqlConnection conn = getsqlconn();
            SqlCommand cmd;
            try
            {
                cmd = new SqlCommand("update Employee set Name=@name,Salary=@sal,Gender=@gen,Address=@add where Id=@Id", conn);
                cmd.Parameters.Add("@name", SqlDbType.NVarChar).Value = e.Name;
                cmd.Parameters.Add("@sal", SqlDbType.Float).Value =e.Salary;
                cmd.Parameters.Add("@gen", SqlDbType.VarChar).Value = e.Gender;
                cmd.Parameters.Add("@Id", SqlDbType.Int).Value =Id;
                cmd.Parameters.Add("@add", SqlDbType.NVarChar).Value = e.Address;
                conn.Open();
                Console.WriteLine(cmd.ExecuteNonQuery());
            }
            catch (SqlException ex)
            {
                Console.WriteLine(ex.Message);
            }
            finally
            {
                conn.Close();
            }
            
        }
        public Employee Get(int id)
        {
            SqlConnection conn = getsqlconn();
            SqlCommand cmd;
            Employee e = null;
            try
            {
                cmd = new SqlCommand("select * from Employee where Id=@ID", conn);
                
                cmd.Parameters.Add("@Id", SqlDbType.Int).Value = id;
               
                conn.Open();
                
                SqlDataReader reader = cmd.ExecuteReader();
                if(reader.Read())
                {
                    e = new Employee();
                    e.Id = Convert.ToInt32(reader["ID"]);
                    e.Address = reader["Address"].ToString();
                    e.Name = reader["Name"].ToString();
                    e.Gender = reader["Gender"].ToString();
                    e.Salary = Convert.ToSingle(reader["Salary"]);
                }
            }
            catch (SqlException ex)
            {
                Console.WriteLine(ex.Message);
            }
            finally
            {
                conn.Close();
            }
            return e;
        }
        public List<Employee> GetAll()
        {
            List<Employee> l1 = new List<Employee>();
            SqlConnection conn = getsqlconn();
            SqlCommand cmd;
            Employee e = null;
            try
            {
                cmd = new SqlCommand("select * from Employee", conn);


                conn.Open();

                SqlDataReader reader = cmd.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        e = new Employee();
                        e.Id = Convert.ToInt32(reader["ID"]);
                        e.Address = reader["Address"].ToString();
                        e.Name = reader["Name"].ToString();
                        e.Gender = reader["Gender"].ToString();
                        e.Salary = Convert.ToSingle(reader["Salary"]);
                        l1.Add(e);
                    }
                }
            }
            catch (SqlException ex)
            {
                Console.WriteLine(ex.Message);
            }
            finally
            {
                conn.Close();
            }
            return l1;
        }
    }
    
}




