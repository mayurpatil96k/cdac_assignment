1) 
class course
{
	//here
};
class DacCourse:public course
{
	// here
};

you should be able to say following

course *c=new course;
c->fees(); // course version should be called
c=new DacCourse;
c->fees();  // DacCourse version should be called


#include <iostream>

class course {
public:
    virtual void fees() {
        std::cout << "Course fees called" << std::endl;
    }
};

class DacCourse : public course {
public:
    void fees() override {
        std::cout << "DacCourse fees called" << std::endl;
    }
};

int main() {
    course* c = new course;
    c->fees();  // Calls the course version of fees

    c = new DacCourse;
    c->fees();  // Calls the DacCourse version of fees

    delete c;  // Clean up the allocated memory

    return 0;
}




2) 
Create a base class FourWheeler. Declare pure virtual function “void start()” in it. 			
Define following sub classes for this class. 
A) Qualis b) Sumo c) Volvo 					
Define “start” function in these classes.			
In main function , create array of pointer to FourWheeler which will contain objects of these three sub classes. 
Now traverse the array and call all the child class methods.

#include <iostream>

// Base class FourWheeler
class FourWheeler {
public:
    virtual void start() = 0; // Pure virtual function
};

// Subclass Qualis
class Qualis : public FourWheeler {
public:
    void start() override {
        std::cout << "Qualis started" << std::endl;
    }
};

// Subclass Sumo
class Sumo : public FourWheeler {
public:
    void start() override {
        std::cout << "Sumo started" << std::endl;
    }
};

// Subclass Volvo
class Volvo : public FourWheeler {
public:
    void start() override {
        std::cout << "Volvo started" << std::endl;
    }
};

int main() {
    // Create an array of pointers to FourWheeler
    FourWheeler* vehicles[3];

    // Instantiate objects of the three subclasses
    Qualis qualis;
    Sumo sumo;
    Volvo volvo;

    // Assign the objects to the array of pointers
    vehicles[0] = &qualis;
    vehicles[1] = &sumo;
    vehicles[2] = &volvo;

    // Call the start method for each vehicle
    for (int i = 0; i < 3; i++) {
        vehicles[i]->start();
    }

    return 0;
}




3)
Create a base class “Subject”.Declare pure virtual function “void maxmarks()” in it.  Define following sub classes for this class. A) Maths b) History c) English.	Define “maxmarks” in these classes.

now write a global function "show" which will accept "subject class pointer" as an argument. this function should be able to call "maxmarks()" of any child class which is passed.
From main function try to call this function by passing various child classes.

#include <iostream>

// Base class Subject
class Subject {
public:
    virtual void maxmarks() = 0; // Pure virtual function
};

// Subclass Maths
class Maths : public Subject {
public:
    void maxmarks() override {
        std::cout << "Maths: Maximum marks are 100" << std::endl;
    }
};

// Subclass History
class History : public Subject {
public:
    void maxmarks() override {
        std::cout << "History: Maximum marks are 90" << std::endl;
    }
};

// Subclass English
class English : public Subject {
public:
    void maxmarks() override {
        std::cout << "English: Maximum marks are 80" << std::endl;
    }
};

// Global function "show" that accepts a Subject class pointer
void show(Subject* subj) {
    subj->maxmarks();
}

int main() {
    // Create instances of the subclasses
    Maths maths;
    History history;
    English english;

    // Call the "show" function with instances of different subclasses
    show(&maths);
    show(&history);
    show(&english);

    return 0;
}

4) same as above except it has to be done using reference of parent class.


#include <iostream>

// Base class Subject
class Subject {
public:
    virtual void maxmarks() = 0; // Pure virtual function
};

// Subclass Maths
class Maths : public Subject {
public:
    void maxmarks() override {
        std::cout << "Maths: Maximum marks are 100" << std::endl;
    }
};

// Subclass History
class History : public Subject {
public:
    void maxmarks() override {
        std::cout << "History: Maximum marks are 90" << std::endl;
    }
};

// Subclass English
class English : public Subject {
public:
    void maxmarks() override {
        std::cout << "English: Maximum marks are 80" << std::endl;
    }
};

// Global function "show" that accepts a Subject class reference
void show(Subject& subj) {
    subj.maxmarks();
}

int main() {
    // Create instances of the subclasses
    Maths maths;
    History history;
    English english;

    // Call the "show" function with instances of different subclasses
    show(maths);
    show(history);
    show(english);

    return 0;
}



5) create an abstract class Shape with
	virtual void display()
	{
		cout<<"display on the canvas"<<endl;
	}
	and
	pure virtual function (contract) void draw() 
functions.

now derive 3 classes from Shape
	Circle,Triangle and Rectangle
in the main function create array of pointer to Shape class and store all the child class objects addresses inside it. Traverse the array and invoke "display()" and "draw()" functions.

#include <iostream>
#include <vector>

// Abstract base class Shape
class Shape {
public:
    virtual void display() {
        std::cout << "Display on the canvas" << std::endl;
    }

    virtual void draw() = 0; // Pure virtual function (contract)
};

// Derived class Circle
class Circle : public Shape {
public:
    void draw() override {
        std::cout << "Draw a circle" << std::endl;
    }
};

// Derived class Triangle
class Triangle : public Shape {
public:
    void draw() override {
        std::cout << "Draw a triangle" << std::endl;
    }
};

// Derived class Rectangle
class Rectangle : public Shape {
public:
    void draw() override {
        std::cout << "Draw a rectangle" << std::endl;
    }
};

int main() {
    // Create instances of the derived classes
    Circle circle;
    Triangle triangle;
    Rectangle rectangle;

    // Create an array of pointers to Shape
    std::vector<Shape*> shapes;

    // Store the addresses of objects in the array
    shapes.push_back(&circle);
    shapes.push_back(&triangle);
    shapes.push_back(&rectangle);

    // Traverse the array and invoke display and draw functions
    for (Shape* shape : shapes) {
        shape->display();
        shape->draw();
    }

    return 0;
}




