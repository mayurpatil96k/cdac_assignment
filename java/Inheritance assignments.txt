1) Create a multi-level inheritance , instantiate the child class and observe constructor invocation.Also show, if needed how will u invoke parent class constructor from child class ?
package test;

class Cheack{
private int num1=10;
protected int num2=20;
Cheack(int k){
System.out.println("In base");
}
void disp(){
System.out.println(num1);
}
}
class test extends Cheack{
test(){
System.out.println("In Sub test");
}
void disp1() {
System.out.println("In disp2");
}
}
class sub extends test{
sub(){
super(10);
System.out.println("in sub2 disp");
}
}

public class Cheackdemo
{
public static void main(String args[])
{
sub sub1=new sub();
}
}
2) create a class "Vehicle", define a method "public void start()" in it. From this class derive a class FourWheeler. How will u override "start()" method of parent class ?
package test;
class Vehicle {
    public void start() {
        System.out.println("Vehicle is starting...");
    }
}


class FourWheeler extends Vehicle {
    @Override
    public void start() {
        System.out.println("FourWheeler is starting...");
    }
}

public class VDemo {
    public static void main(String[] args) {
      
        FourWheeler car = new FourWheeler();
        
       
        car.start();
    }
}

3) Go for Hierarchical inheritance, create instances of child class and observe constructor invocation.
package test;

class Cheack{
private int num1=10;
protected int num2=20;
Cheack(){
System.out.println("In base");
}
void disp(){
System.out.println(num1);
}
}
class test extends Cheack{
test(){
System.out.println("In Sub test");
}
void disp1() {
System.out.println("In disp2");
}
}
class sub extends Cheack{
sub(){
System.out.println("in sub2 disp");
}
}

public class Cheackdemo
{
public static void main(String args[])
{
sub sub1=new sub();
test sub2=new test();
}
}
4) Create a class "Top1" with "disp1()" method.
From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
Now show how will u achieve dynamic polymorphism.
package test;
class Top1 {
    void start() {
    	System.out.println("In Top start");
    }
}
class Bottom1 extends Top1{
	void start() {
    	System.out.println("In bottom1");
    }
}
class Bottom2 extends Top1{
	void start() {
    	System.out.println("In bottom2");
    }
}
class Bottom3 extends Top1{
	void start() {
    	System.out.println("In bottom3");
    }
}


public class VDemo {
	static void perform(Top1 ref) {
		ref.start();
	}
    public static void main(String[] args) {
    	perform(new Bottom1());
    	perform(new Bottom2());
    	perform(new Bottom3());
    }
}

5) create abstract class Shape. declare "draw()" function as abstract. From this class define "Triangle","Polygon" and "Circle" .
create an array of Shape having 3 elements.
store child objects into this array . and call
their draw function.


package test;
abstract class Shape {
	abstract void draw();
}
class Triangle extends Shape {

	@Override
	void draw() {
		System.out.println("Drawing Triangle...");
		
	}
	
}
class Polygon extends Shape {

	@Override
	void draw() {
		System.out.println("Drawing Polygon...");
		
	}
	
}
class Circle extends Shape {

	@Override
	void draw() {
		System.out.println("Drawing Cirlce...");
		
	}
	
}

public class VDemo {
    public static void main(String[] args) {
    	Shape arr[]=new Shape[3];
    	arr[0]=new Triangle();
    	arr[1]=new Polygon();
    	arr[2]=new Circle();
    	for(int i=0;i<arr.length;i++) {
    		arr[i].draw();
    	}
    }
}



6) Define interface "A" with "disp1()" method.
Derive from "A", interface "B" with "disp2" method.
Derive class "C" , from "B".
Instantiate class "C" and call its members as well as derived from parent interfaces.

package test;
interface A{
	void disp1();
}
interface B extends A{
	void disp2();
}
class c implements A,B{

	@Override
	public void disp2() {
		System.out.println("in disp 2");
		
	}

	@Override
	public void disp1() {
		System.out.println("in disp 1");
		
	}
	void disp3() {
		System.out.println("in disp 3");
	}
	
}
public class VDemo {
    public static void main(String[] args) {
    	c obj=new c();
    	obj.disp1();
    	obj.disp2();
    	obj.disp3();
    }
}


7) Define class "Parent1" with some data.
Define interface "Parent2" with some methods.
Derive a class "Child" from "Parent1" and "Parent2", instantiate it and call the members.
package test;
abstract class parent1{
	void disp() {
		System.out.println("in parent1 disp");
	}
}
interface parent2{
	void disp2();
}
class child extends parent1 implements parent2{
	public void disp2() {
		System.out.println("In parent 2 disp which is implemented in child");
	}
	void disp3() {
		System.out.println("In child disp");
	}
}

public class VDemo {
    public static void main(String[] args) {
    	child c=new child();
    	c.disp();
    	c.disp2();
    	c.disp3();
    }
}

8) Define a class "base1" with only parameterized constructor.
Derive a class "sub1" from "base1". This class should have following constructors
	a) Default
	b) one parameter
	c) two parameter
Now try to instantiate "sub1" , using any of the above mentioned constructors.
package test;
class base{
	base(int k){
		System.out.println("In base param constructor");
	}
}
class child extends base{

	child(){
		super(10);
		System.out.println("in nonparam of base");
	}
	child(int k) {
		super(k);
		System.out.println("In child base constructor");
	}
	child(int k,int j) {
		super(10);
		System.out.println("In child base constructor with two param");
	}
	
}


public class VDemo {
    public static void main(String[] args) {
    	child obj=new child();
    	child obj1=new child(10);
    	child obj2=new child(10,20);
    }
}


9) create interface "Game" , have an abstract method "play()". from this interface implements classes like "Cricket" , "FootBall" and "Tennis".
Now Define one more class 
public class Demo with main function.
In this class have a static method "perform" which will take interface reference as parameter.inside "perform()" see to it that any child object passed ,its "play()" method should be invoked. Call "perform()" method from main function.

package test;
interface game{
	void play();
}
class Cricket implements game{
	public void play() {
		System.out.println("playing Cricket...");
	}
}
class Tennis implements game{
	public void play() {
		System.out.println("playing Tennis...");
	}
}
class Football implements game{
	public void play() {
		System.out.println("playing Football...");
	}
}

public class VDemo {
	static void perform(game ref) {
		ref.play();
	}
    public static void main(String[] args) {
    	perform(new Cricket());
    	perform(new Tennis());
    	perform(new Football());
    }
}








