1) define interface "First" with "default void fun()" and interface "Second" with "default void fun()". 
Now derive a class Child from both these interfaces. 
Inside main function instantiate Child class instance and invoke "fun" method.
Solution:
package test;

interface First{
	default void fun() {
		System.out.println("In first fun");
	}
}
interface Second{
	default void fun() {
		System.out.println("In first fun");
	}
}
class Child implements First,Second{

	@Override
	public void fun() {
		// TODO Auto-generated method stub
		System.out.println("In Child fun");
	}
	
}
public class Demo1{
	public static void main(String[] args) {
		Child c=new Child();
		c.fun();
	}
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2) define interface "Third" with "default void disp1()" and "static void disp2()" methods.
derive a class "Sub" from "Third" ( do not override "disp1")
inside main function invoke "disp1" and "disp2" methods.
solution;
package test;

interface Third{
	default void disp1() {
		System.out.println("In first disp1");
	}
	static void disp2() {
		System.out.println("in static of third");
	}
}

class Sub implements Third{
	
}
public class Demo1{
	public static void main(String[] args) {
		Sub c=new Sub();
		c.disp1();
		Third.disp2();
	}
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3)define interface "Fourth" with "default void disp3()" method.
define a class "Base1" with "public void disp3()" method,
now derive a class Sub1 from "Base1" and "Fourth". Sub1 class should have only "public void myfun()" method.
inside main create an object of "Sub1" and invoke "disp3".
once you get the result, also try to invoke "disp3" of "Fourth"
solution:

package test;

interface Fourth{
	default void disp3() {
		System.out.println("In first disp3");
	}
	
}

class Base1{
	public void disp3() {
		System.out.println("In base1 disp");
	}
}
class Sub1 extends Base1 implements Fourth{
	public void myfun() {
		System.out.println("In sub1 fun");
	}
}
public class Demo1{
	public static void main(String[] args) {
		Sub1 c = new Sub1();
		c.disp3();
	}
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4) define interface "Base1" with "default void fun1()".
derive an interface "Sub1" from "Base1" with "default void fun2()"
derive a class "Sub2" from "Sub1". It should have only "public void fun3()" method.

inside main function, create an object of "Sub2" and make sure when u invoke "fun3", it should call "Sub1's fun2" which should call "Base1's fun1" method.
solution:

package test;

interface Base1{
	default void fun1() {
		System.out.println("fun1 disp");
	}
}

interface Sub1 extends Base1{
	default void fun2() {
		System.out.println("fun2 of sub1");
	}
}
class Sub2 implements Sub1{
	public void fun3() {
		Sub1.super.fun2();
		System.out.println("fun3 sub2");
	}
}
public class Demo1{
	public static void main(String[] args) {
		Sub2 c = new Sub2();
		c.fun3();
	}
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5) define interface "First" with "static void disp1()" method.
class "Base" with "static void disp2()" method.
derive a class "Sub" from "Base" and "First"
now define a class Demo in which define "main" method.
inside main show how many ways you can invoke "disp1" and "disp2" methods.

solution:
package test;

interface First{
	static void disp1() {
		System.out.println("in first");
	}
}
class Base{
	static void disp2() {
		System.out.println("In base");
	}
}
class Sub extends Base implements First{
	
}
public class Demo1{
	public static void main(String[] args) {
		Sub c = new Sub();
		c.disp2();
		First.disp1();
		Base.disp2();
	}
}