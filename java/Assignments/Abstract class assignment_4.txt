public class UIComponent
{
}
public class Button extends UIComponent
{
}
public class TextField extends UIComponent
{
}
public class CheckBox extends UIComponent
{
}
public abstract class UIComponentCreator
{
	public void show(String type)
	{
		UIComponent comp=createUIComponent(type);
		add(comp);
	}
	public void add(UIComponent component)
	{
		System.out.prinlnt("Added the component\t"+component);
	}
	public abstract UIComponent createUIComponent(String type);
}

create 3 child classes of "UIComponentCreator"
	WindowsUIComponentCreator, LinuxUIComponentCreator and MacUIComponentCreator
 in all these classes "createUIComponent()" method must be defined in such a way that whatever type is passed as per this it must return a specific UIComponent. e.g. if "button" is passed , it should return "Button" class object   or if "textfield" is passed , it should return "TextField" class object.

create a class UIComponentCreatorDemo with main function
inside main function
	create objects of WindowsUIComponentCreator, LinuxUIComponentCreator and MacUIComponentCreator classes and invoke "createUIComponent()" ,"add()" and "show()" methods.

package test;

class UIComponent {
	static{
		System.out.println("UI COMPONENT");
	}
}

class Button extends UIComponent {
	static{
		System.out.println("UI COMPONENT BUTTON");
	}
}

class TextField extends UIComponent {
	static{
		System.out.println("UI COMPONENT TEXTFIELD");
	}
}

class CheckBox extends UIComponent {
	static{
		System.out.println("UI COMPONENT CHEACKBOX");
	}
}

abstract class UIComponentCreator {
    public void show(String type) {
        UIComponent comp = createUIComponent(type);
        add(comp);
    }

    public void add(UIComponent component) {
        System.out.println("Added the component\t" + component);
    }

    public abstract UIComponent createUIComponent(String type);
}

class WindowsUIComponentCreator extends UIComponentCreator {
    @Override
    public UIComponent createUIComponent(String type) {
        if ("button".equalsIgnoreCase(type)) {
            return new Button();
        } else if ("textfield".equalsIgnoreCase(type)) {
            return new TextField();
        } else if ("checkbox".equalsIgnoreCase(type)) {
            return new CheckBox();
        } else {
            throw new IllegalArgumentException("Unsupported UI component type: " + type);
        }
    }
}

class LinuxUIComponentCreator extends UIComponentCreator {
    @Override
    public UIComponent createUIComponent(String type) {
        if ("button".equalsIgnoreCase(type)) {
            return new Button();
        } else if ("textfield".equalsIgnoreCase(type)) {
            return new TextField();
        } else if ("checkbox".equalsIgnoreCase(type)) {
            return new CheckBox();
        } else {
            throw new IllegalArgumentException("Unsupported UI component type: " + type);
        }
    }
}

class MacUIComponentCreator extends UIComponentCreator {
    @Override
    public UIComponent createUIComponent(String type) {
        if ("button".equalsIgnoreCase(type)) {
            return new Button();
        } else if ("textfield".equalsIgnoreCase(type)) {
            return new TextField();
        } else if ("checkbox".equalsIgnoreCase(type)) {
            return new CheckBox();
        } else {
            throw new IllegalArgumentException("Unsupported UI component type: " + type);
        }
    }
}

public class UIComponentCreatorDemo {
	public static void main(String[] args) {
		

        UIComponentCreator windowsCreator = new WindowsUIComponentCreator();
        UIComponentCreator linuxCreator = new LinuxUIComponentCreator();
        UIComponentCreator macCreator = new MacUIComponentCreator();

        windowsCreator.show("button");
        linuxCreator.show("textfield");
        macCreator.show("checkbox");
    }
}
