
1) define a functional interface "First" with an abstract method "void disp1()" , default method "void disp2()" and a static method "void disp3()"

inside main function using lambda expression invoke "disp1()" and "disp2()" methods.
also invoke "disp3()" method inside main.
Solution:
package test;

interface First{
	void disp();
	default void disp2() {
		System.out.println("In disp 2 of First");
	}
	static void disp3() {
		System.out.println("In static disp 3");
	}
}
class Demo8{
	public static void main(String[] args) {
		First ref=()->{System.out.println("in disp1 of First");};
		ref.disp();
		ref.disp2();
		First.disp3();
	}
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2) define a functional interface "Second" with an abstract method "void disp4()".

define a class Demo with main function.
inside main function create two implementations of "Second" using lambda expression and display their names.
solution:
package test;

interface Second{
	void disp4();
	
}
class Demo8{
	public static void main(String[] args) {
		Second ref=()->{System.out.println("In fisrt implementation");};
		Second re11=()->{System.out.println("In Second implementation");};
		ref.disp4();
		System.out.println(ref.getClass().getName());
		re11.disp4();
		System.out.println(re11.getClass().getName());
	}
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3) define a functional interface "MyInterface" with an abstract method "void fun()"

define a class Demo with two functions "static void perform" and main.

from main function pass lambda expression, collect it in "perform" method and invoke "fun()" function.
solution:

package test;

interface MyInterface{
	void fun();
}
public class demo{
	static void perform(MyInterface ref) {
		System.out.println("in static of demo");
		ref.fun();
	}
	public static void main(String[] args) {
		perform(()->{System.out.println("Executiong fun using lambda expression");});
	}
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4) define a functional interface "Calculator" with an abstract method "int multiply(int a,int b)"
define a class "CalcDemo" with main method.
inside main using lambda create an implementation of "Calculator" , invoke "multiply()" method and display its result.
solution:
package test;

interface Calculator{
	int multiply(int a,int b);
}
public class caldemo{
	public static void main(String[] args) {
		Calculator ref=(a,b)->{return a*b;};
		System.out.println("Mulitplication is "+
		ref.multiply(10, 20));
	}
}
ref
5) define a class "Display" with "void disp" method. inside this method display values from 1 to 10.

create an implementation of "Runnable" using lambda expression which will invoke "disp()" method of "Display" class.

create 2 threads and pass above created "Runnable" implementation to these threads.
make sure while one thread is executing other thread will not interfere.
solution:
package test;

public class Display{
	synchronized void disp() {
		for(int i=1;i<=10;i++) {
			System.out.println(i);
		}
	}
	
	public static void main(String[] args) {
		Display d=new Display();
		Runnable ref=()->{d.disp();};
		
		Thread t1= new Thread(ref,"First");
		t1.start();
		Thread t2= new Thread(ref,"Second");
		t2.start();
	}
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
